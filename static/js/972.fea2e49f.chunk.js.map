{"version":3,"file":"static/js/972.fea2e49f.chunk.js","mappings":"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","sources":["Utills/Api/api.jsx","Views/CastView/CastView.styled.js","Views/CastView/index.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '40875a7f166b061faf5f77ac964541b9';\n\nexport const loadTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  const trendingMovies = response.data.results.map(movie => {\n    const { id, title, poster_path } = movie;\n    return {\n      id,\n      title,\n      poster_path,\n    };\n  });\n  return trendingMovies;\n};\n\nexport const loadFullInfoMovie = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n  const { vote_average, title, overview, genres, poster_path, release_date } =\n    response.data;\n\n  return {\n    vote_average,\n    title,\n    overview,\n    genres,\n    poster_path,\n    release_date,\n  };\n};\n\nexport const loadCastInfoMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  const castInfo = response.data.cast.map(el => {\n    const { name, character, profile_path, id } = el;\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n\n  return castInfo;\n};\n\nexport const loadReviewsMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(el => {\n    const { id, author, content, author_details } = el;\n    return {\n      id,\n      author,\n      content,\n      author_details,\n    };\n  });\n\n  return reviews;\n};\n\nexport const loadMovieOnSearch = searchQuery => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      const movieList = data.results.map(el => {\n        const { id, title, poster_path } = el;\n        return {\n          id,\n          title,\n          poster_path,\n        };\n      });\n\n      return movieList;\n    });\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(130px, 5fr));\n  grid-gap: 15px;\n  margin: 0 auto;\n  padding: 0 15px;\n  list-style: none;\n  justify-content: center;\n  margin-top: 40px;\n`;\n\nexport const CastCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  padding: 5px;\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(20px);\n  border-radius: 3px;\n  overflow: hidden;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  :hover {\n    transform: scale(1.03);\n    filter: brightness(1.1) contrast(0.95) saturate(1);\n  }\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  width: 100%;\n  max-width: 150px;\n  height: 200px;\n  object-fit: cover;\n`;\n\nexport const CastInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px 5px;\n  gap: 15px;\n`;\n\nexport const CastCharacter = styled.span`\n  color: white;\n  font-weight: 500;\n`;\n\nexport const CharacterName = styled.p`\n  margin: 0;\n`;\n\nexport const CastName = styled.p`\n  color: white;\n  font-size: 20px;\n  margin: 0;\n  font-weight: 700;\n`;\n","import { Suspense, useEffect, useState } from 'react';\nimport { Blocks } from 'react-loader-spinner';\nimport { useParams } from 'react-router-dom';\nimport { loadCastInfoMovie } from 'Utills/Api/api';\nimport { Sections, Title } from 'Views/HomeView/HomeView.styled';\nimport {\n  CastCard,\n  CastCharacter,\n  CastImg,\n  CastInfoWrapper,\n  CastList,\n  CastName,\n  CharacterName,\n} from './CastView.styled';\nimport image from './image.jpg';\n\nconst BASE_PHOTO_URL = 'https://image.tmdb.org/t/p/w200/';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castInfo, setCastInfo] = useState([]);\n\n  useEffect(() => {\n    loadCastInfoMovie(movieId).then(setCastInfo);\n  }, [movieId]);\n\n  if (castInfo.length === 0) {\n    return null;\n  }\n  const ProfilePoster = profile_path => {\n    if (profile_path === null) {\n      return `${image}`;\n    }\n    return `${BASE_PHOTO_URL}${profile_path}`;\n  };\n\n  return (\n    <Suspense\n      fallback={\n        <Blocks\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"blocks-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"loaderStyle\"\n        />\n      }\n    >\n      <Sections>\n        <Title>Cast</Title>\n        <CastList>\n          {castInfo.map(actor => {\n            const { name, character, profile_path, id } = actor;\n            return (\n              <CastCard key={id}>\n                <div>\n                  <CastImg src={`${ProfilePoster(profile_path)}`} alt={name} />\n                </div>\n                <CastInfoWrapper>\n                  <CastName>{name}</CastName>\n                  <CharacterName>\n                    Character: <CastCharacter> {character}</CastCharacter>\n                  </CharacterName>\n                </CastInfoWrapper>\n              </CastCard>\n            );\n          })}\n        </CastList>\n      </Sections>\n    </Suspense>\n  );\n};\nexport default Cast;\n"],"names":["axios","API_KEY","loadTrendingMovies","response","trendingMovies","data","results","map","movie","id","title","poster_path","loadFullInfoMovie","vote_average","overview","genres","release_date","loadCastInfoMovie","castInfo","cast","el","name","character","profile_path","loadReviewsMovie","reviews","author","content","author_details","loadMovieOnSearch","searchQuery","fetch","then","json","CastList","styled","CastCard","CastImg","CastInfoWrapper","CastCharacter","CharacterName","CastName","movieId","useParams","useState","setCastInfo","useEffect","length","ProfilePoster","image","Suspense","fallback","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","actor","src","alt"],"sourceRoot":""}