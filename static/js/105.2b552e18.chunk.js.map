{"version":3,"file":"static/js/105.2b552e18.chunk.js","mappings":"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","sources":["Utills/Api/api.jsx","Views/HomeView/index.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '40875a7f166b061faf5f77ac964541b9';\n\nexport const loadTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  const trendingMovies = response.data.results.map(movie => {\n    const { id, title, poster_path, vote_average } = movie;\n    return {\n      id,\n      title,\n      poster_path,\n      vote_average,\n    };\n  });\n  return trendingMovies;\n};\n\nexport const loadFullInfoMovie = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n  const { vote_average, title, overview, genres, poster_path, release_date } =\n    response.data;\n\n  return {\n    vote_average,\n    title,\n    overview,\n    genres,\n    poster_path,\n    release_date,\n  };\n};\n\nexport const loadCastInfoMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  const castInfo = response.data.cast.map(el => {\n    const { name, character, profile_path, id } = el;\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n\n  return castInfo;\n};\n\nexport const loadReviewsMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(el => {\n    const { id, author, content, author_details } = el;\n    return {\n      id,\n      author,\n      content,\n      author_details,\n    };\n  });\n\n  return reviews;\n};\n\nexport const loadMovieOnSearch = searchQuery => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      const movieList = data.results.map(el => {\n        const { id, title, poster_path, vote_average } = el;\n        return {\n          id,\n          title,\n          poster_path,\n          vote_average,\n        };\n      });\n\n      return movieList;\n    });\n};\n","import { MoviesList } from 'components/MovieList/MovieList';\nimport { useState, useEffect } from 'react';\nimport { loadTrendingMovies } from 'Utills/Api/api';\nimport { Sections, Title } from './HomeView.styled';\n\nconst HomeView = () => {\n  const [trendingMovies, setTrendigMovies] = useState([]);\n  useEffect(() => {\n    loadTrendingMovies().then(setTrendigMovies);\n  }, []);\n  return (\n    <Sections>\n      <Title>Trending today</Title>\n      <MoviesList movies={trendingMovies} link={'movies/'}></MoviesList>\n    </Sections>\n  );\n};\n\nexport default HomeView;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nexport const LinkStyle = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    filter: brightness(1.1) contrast(0.95) saturate(1);\n    img {\n      scale: 1.01;\n    }\n  }\n`;\n\nexport const MovieList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 4fr));\n  grid-gap: 15px;\n  margin: 0 auto;\n  padding: 0 15px;\n  list-style: none;\n  justify-content: center;\n  margin-top: 40px;\n`;\n\nexport const MovieCard = styled.li`\n  background-repeat: no-repeat;\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(20px);\n  border-radius: 3px;\n  padding: 0px 0px 0px 0px;\n  font-size: 13px;\n  overflow: hidden;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Image = styled.img`\n  transition: scale 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  width: 95%;\n  padding: 7px;\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  text-align: center;\n  color: white;\n  margin-top: 15px;\n  padding: 0 7px;\n  margin-bottom: 22px;\n`;\n\nexport const MovieRating = styled.p`\n  margin: 0;\n  font-size: 13px;\n  font-weight: 500;\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 10px;\n  color: white;\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 0px 0px 0px 20px;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  Image,\n  MovieCard,\n  MovieList,\n  MovieTitle,\n  LinkStyle,\n  MovieRating,\n} from './MovieList.styled';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const MoviesList = ({ movies, link, state }) => {\n  return (\n    <MovieList>\n      {movies.map(movie => {\n        const { id, title, poster_path, vote_average } = movie;\n        const poster = BASE_URL + poster_path;\n        return link ? (\n          <MovieCard key={id}>\n            <LinkStyle to={`${link}${id}`} state={state}>\n              <Image src={poster} alt={title} />\n              <MovieRating>{vote_average}/10</MovieRating>\n              <MovieTitle>{title}</MovieTitle>\n            </LinkStyle>\n          </MovieCard>\n        ) : (\n          <MovieCard key={id}>\n            <LinkStyle to={`${id}`} state={state}>\n              <Image src={poster} alt={title} />\n              <MovieRating>{vote_average}</MovieRating>\n              <MovieTitle>{title}</MovieTitle>\n            </LinkStyle>\n          </MovieCard>\n        );\n      })}\n    </MovieList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  link: PropTypes.string,\n  state: PropTypes.object,\n};\n"],"names":["axios","API_KEY","loadTrendingMovies","response","trendingMovies","data","results","map","movie","id","title","poster_path","vote_average","loadFullInfoMovie","overview","genres","release_date","loadCastInfoMovie","castInfo","cast","el","name","character","profile_path","loadReviewsMovie","reviews","author","content","author_details","loadMovieOnSearch","searchQuery","fetch","then","json","useState","setTrendigMovies","useEffect","movies","link","LinkStyle","styled","Link","MovieList","MovieCard","Image","MovieTitle","MovieRating","MoviesList","state","poster","to","src","alt"],"sourceRoot":""}