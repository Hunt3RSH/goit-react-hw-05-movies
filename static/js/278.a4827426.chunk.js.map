{"version":3,"file":"static/js/278.a4827426.chunk.js","mappings":"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","sources":["Utills/Api/api.jsx","Views/ReviewsView/ReviewsView.styled.js","Views/ReviewsView/index.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '40875a7f166b061faf5f77ac964541b9';\n\nexport const loadTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  const trendingMovies = response.data.results.map(movie => {\n    const { id, title, poster_path } = movie;\n    return {\n      id,\n      title,\n      poster_path,\n    };\n  });\n  return trendingMovies;\n};\n\nexport const loadFullInfoMovie = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n  const { vote_average, title, overview, genres, poster_path, release_date } =\n    response.data;\n\n  return {\n    vote_average,\n    title,\n    overview,\n    genres,\n    poster_path,\n    release_date,\n  };\n};\n\nexport const loadCastInfoMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  const castInfo = response.data.cast.map(el => {\n    const { name, character, profile_path, id } = el;\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n\n  return castInfo;\n};\n\nexport const loadReviewsMovie = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const reviews = response.data.results.map(el => {\n    const { id, author, content, author_details } = el;\n    return {\n      id,\n      author,\n      content,\n      author_details,\n    };\n  });\n\n  return reviews;\n};\n\nexport const loadMovieOnSearch = searchQuery => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`\n  )\n    .then(response => response.json())\n    .then(data => {\n      const movieList = data.results.map(el => {\n        const { id, title, poster_path } = el;\n        return {\n          id,\n          title,\n          poster_path,\n        };\n      });\n\n      return movieList;\n    });\n};\n","import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  padding: 0 15px;\n  margin: 0;\n`;\n\nexport const ReviewListItem = styled.li`\n  background-color: rgba(0, 0, 0, 0.5);\n  margin-bottom: 26px;\n  background-image: url(https://store.akamai.steamstatic.com/public/images/v6/maincol_gradient_rule.png);\n  background-repeat: no-repeat;\n  background-position: top left;\n  padding: 15px 15px;\n`;\n\nexport const AuthorWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n`;\n\nexport const AuthorImg = styled.img`\n  display: block;\n  width: 32px;\n  height: 32px;\n  object-fit: cover;\n  padding: 2px;\n  background: linear-gradient(\n    to bottom,\n    rgba(83, 164, 196, 1) 5%,\n    rgba(69, 128, 151, 1) 95%\n  );\n`;\n\nexport const ReviewContent = styled.p`\n  font-family: 'Motiva Sans', Sans-serif;\n  font-weight: normal;\n  font-size: 13px;\n  line-height: 17px;\n  color: #acb2b8;\n  margin-left: 8px;\n`;\n\nexport const AuthorName = styled.p`\n  color: #c1dbf4;\n  font-size: 13px;\n  font-family: 'Motiva Sans', Sans-serif;\n  font-weight: bold;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { loadReviewsMovie } from 'Utills/Api/api';\nimport { Sections, Title } from 'Views/HomeView/HomeView.styled';\nimport {\n  AuthorImg,\n  AuthorName,\n  AuthorWrapper,\n  ReviewContent,\n  ReviewList,\n  ReviewListItem,\n} from './ReviewsView.styled';\nimport image from '../CastView/image.png';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    loadReviewsMovie(movieId).then(setReviews);\n  }, [movieId]);\n\n  const ReviewsNull = reviews.length === 0;\n\n  const AvatarAuthor = avatar => {\n    if (avatar === null) {\n      return `${image}`;\n    }\n    if (avatar.includes('http') === true) {\n      return `${avatar.slice(1)}`;\n    }\n    return `${BASE_URL}${avatar}`;\n  };\n\n  return ReviewsNull ? (\n    <Sections>\n      <Title>We don't have any reviews for this movie</Title>\n    </Sections>\n  ) : (\n    <Sections>\n      <ReviewList>\n        {reviews.map(review => {\n          const { id, content, author } = review;\n          const avatar = review.author_details.avatar_path;\n\n          return (\n            <ReviewListItem key={id}>\n              <AuthorWrapper>\n                <AuthorImg src={AvatarAuthor(avatar)} alt={author} />\n                <AuthorName>{author}</AuthorName>\n              </AuthorWrapper>\n\n              <ReviewContent>{content}</ReviewContent>\n            </ReviewListItem>\n          );\n        })}\n      </ReviewList>\n    </Sections>\n  );\n};\nexport default Reviews;\n"],"names":["axios","API_KEY","loadTrendingMovies","response","trendingMovies","data","results","map","movie","id","title","poster_path","loadFullInfoMovie","vote_average","overview","genres","release_date","loadCastInfoMovie","castInfo","cast","el","name","character","profile_path","loadReviewsMovie","reviews","author","content","author_details","loadMovieOnSearch","searchQuery","fetch","then","json","ReviewList","styled","ReviewListItem","AuthorWrapper","AuthorImg","ReviewContent","AuthorName","movieId","useParams","useState","setReviews","useEffect","ReviewsNull","length","AvatarAuthor","avatar","image","includes","slice","review","avatar_path","src","alt"],"sourceRoot":""}